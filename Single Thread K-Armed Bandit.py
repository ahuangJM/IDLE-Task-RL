import sys
import random
import numpy as np
import matplotlib.pyplot as plt

def bandit(action, mu, sigma, k): #TODO change this
    env_reward = None
    left = None
    right = None
    if (k%2==0):
        left = np.random.normal(mu, sigma, k/2)
        right = np.random.normal(mu, sigma, k/2)
    else:
        left = np.random.normal(mu, sigma, (k-1)/2)
        right = np.random.normal(mu, sigma, (k+1)/2)
    left = np.sort(left)
    right = np.sort(right)[::-1]
    env_reward = np.concatenate([left, right])
    return env_reward[action]

if __name__ == "__main__":
    # Q = [] # Estimate value
    # N = [] # Actions
    # reward_hist = []
    # k = 0
    # prob = 0
    # mu = 0 # defaults mean
    # sigma = 0.1 # default standard deviation

    # k = int(sys.argv[1]) # number of arms
    # prob = float(sys.argv[2]) # [0,1] chance of random action
    # mu = float(sys.argv[3]) # mean
    # sigma = float(sys.argv[4]) # standard deviation

    # reward_hist = [0]*250
    
    # # f = open('D:\\Users\\AlanJ\\Documents\\GitHub\\IDLE-Task-RL\\karmBandit.txt', 'w+')

    # for n in range(0, 1000):
    #     Q = [0] * k
    #     N = [0] * k
    #     for _ in range(0, 250):
    #         choosen_action = 0
    #         if (random.uniform(0, 1) <= (1-prob)):
    #             max_estimate = max(Q)
    #             max_actions = []
    #             i = 0
    #             for q in Q:
    #                 if q == max_estimate:
    #                     max_actions.append(i)
    #                 i+=1
    #             choosen_action = random.choice(max_actions)
    #         else:
    #             choosen_action = random.randint(0, k-1)
    #         reward = bandit(choosen_action, mu, sigma, k)
    #         N[choosen_action] = N[choosen_action]+ 1
    #         Q[choosen_action] = Q[choosen_action] + (reward-Q[choosen_action])/N[choosen_action]
    #         reward_hist[_] = reward_hist[_] + reward
    #         # f.write("A={}\tR={}\n".format(choosen_action, reward))

    # # f.close()

    # reward_hist = [x / 1000 for x in reward_hist]
    reward_hist = [-0.000792,0.169712,0.259464,0.310985,0.346071,0.367162,0.377953,0.389403,0.397211,0.408260,0.411222,0.414929,0.421453,0.424326,0.431354,0.434192,0.436951,0.446824,0.446024,0.450005,0.452211,0.457044,0.463280,0.461836,0.467708,0.468972,0.470059,0.473390,0.477132,0.481061,0.481114,0.488649,0.489817,0.493285,0.494066,0.494681,0.499046,0.500715,0.506014,0.502529,0.509546,0.509508,0.511346,0.517949,0.513253,0.515076,0.520510,0.526106,0.524239,0.529877,0.530098,0.529496,0.527589,0.531881,0.534726,0.538217,0.541300,0.544678,0.543137,0.546846,0.547778,0.546715,0.548891,0.552891,0.555311,0.551381,0.552601,0.558981,0.556089,0.565696,0.565012,0.562560,0.564217,0.567393,0.568220,0.569882,0.569113,0.569119,0.573918,0.573469,0.576760,0.574835,0.580102,0.575947,0.584975,0.580478,0.584476,0.581589,0.584308,0.584029,0.590293,0.589134,0.588769,0.588020,0.592908,0.592517,0.590928,0.592572,0.593500,0.594781,0.594749,0.602094,0.598478,0.602774,0.602111,0.603926,0.607465,0.604035,0.605989,0.600916,0.604615,0.610173,0.613590,0.607626,0.611087,0.614001,0.609370,0.610939,0.610821,0.615027,0.617713,0.614889,0.614471,0.615497,0.618661,0.619943,0.623200,0.618170,0.623110,0.619607,0.624479,0.625531,0.625941,0.625566,0.625595,0.621295,0.622304,0.627544,0.627287,0.627920,0.628216,0.629943,0.628985,0.633068,0.627998,0.633154,0.627989,0.631410,0.630321,0.629899,0.636499,0.633156,0.629656,0.632761,0.638350,0.639482,0.634702,0.633875,0.641528,0.636130,0.637110,0.638461,0.637394,0.641671,0.639804,0.637422,0.640764,0.642799,0.640702,0.643387,0.648322,0.645290,0.642461,0.643982,0.642045,0.645778,0.650012,0.646275,0.640243,0.645531,0.644345,0.648126,0.649968,0.645646,0.651419,0.653620,0.649409,0.646587,0.647928,0.649402,0.651009,0.651671,0.651804,0.653499,0.650716,0.651235,0.652385,0.651979,0.648399,0.651739,0.656086,0.652820,0.653516,0.654812,0.656302,0.654408,0.649006,0.658431,0.659240,0.654059,0.655892,0.656893,0.659237,0.660749,0.659638,0.663015,0.661439,0.658276,0.660943,0.659664,0.656164,0.662033,0.662238,0.662408,0.661928,0.656417,0.665774,0.662763,0.661556,0.663543,0.662674,0.663878,0.656998,0.664050,0.662116,0.662903,0.661875,0.664607,0.658966,0.664296,0.667829,0.668344,0.663653,0.663517,0.664240,0.665724,0.667888,0.658555,0.666552,0.668191,0.672070,0.667399,0.663870,0.667566,0.669950,0.668880,0.671490,0.668905,0.666107,0.669836,0.668060,0.669433,0.673226,0.670528,0.674600,0.665615,0.671604,0.672712,0.671665,0.669364,0.669590,0.671337,0.672440,0.666251,0.674362,0.671015,0.665693,0.671874,0.670583,0.672479,0.669937,0.671453,0.676143,0.673796,0.669253,0.676378,0.672312,0.676225,0.671558,0.673526,0.673347,0.674347,0.671111,0.674909,0.670424,0.671554,0.673129,0.670236,0.671622,0.681548,0.677949,0.676118,0.676938,0.674729,0.676869,0.681819,0.673188,0.671665,0.676386,0.678519,0.674520,0.674463,0.673556,0.676702,0.677577,0.673681,0.675463,0.683392,0.674375,0.679276,0.677415,0.676617,0.677706,0.676607,0.680795,0.680046,0.679305,0.675287,0.680636,0.682251,0.676633,0.680428,0.679697,0.679875,0.682497,0.678618,0.680255,0.676975,0.679357,0.681507,0.679288,0.681784,0.677077,0.676161,0.679491,0.681986,0.681354,0.675640,0.677357,0.680100,0.684235,0.676107,0.679098,0.679716,0.684505,0.680819,0.679718,0.681815,0.681323,0.679821,0.673463,0.679380,0.684328,0.679642,0.683655,0.687124,0.688320,0.683706,0.682714,0.684709,0.681988,0.679578,0.683360,0.683983,0.680038,0.686528,0.681120,0.680628,0.683750,0.684281,0.682990,0.684086,0.680242,0.682542,0.679324,0.685944,0.681797,0.684206,0.681525,0.681603,0.687425,0.687563,0.687915,0.684713,0.683167,0.676140,0.683349,0.689494,0.686748,0.682811,0.685993,0.687951,0.687943,0.684202,0.682376,0.680292,0.678986,0.682747,0.684402,0.686817,0.681102,0.684930,0.684207,0.685134,0.691530,0.687474,0.685441,0.687295,0.684080,0.685738,0.684180,0.688958,0.690256,0.681484,0.683185,0.684901,0.689193,0.690761,0.685831,0.686023,0.683201,0.684738,0.685115,0.687388,0.684323,0.687044,0.684268,0.687463,0.686240,0.685507,0.686510,0.683771,0.687199,0.688373,0.687511,0.683267,0.684798,0.688519,0.689394,0.685860,0.683334,0.684984,0.692798,0.687749,0.683137,0.690440,0.686349,0.689814,0.681263,0.685610,0.687365,0.683966,0.689448,0.685709,0.686259,0.685236,0.682060,0.683556,0.691284,0.685358,0.683585,0.686056,0.692745,0.688582,0.686258,0.684820,0.680903,0.684737,0.682773,0.688644,0.690896,0.687336,0.686943,0.687154,0.690539,0.688521,0.686398,0.680472,0.685635,0.690156,0.684418,0.689819,0.687577,0.684013,0.690820,0.689307,0.689080,0.686979,0.688092,0.687155,]
    plt.plot(reward_hist) # plotting by columns
    plt.show()